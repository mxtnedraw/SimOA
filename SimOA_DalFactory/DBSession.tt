<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
 <#
    const string inputFile = @"../SimOA_Model/SimOA.edmx";
　　var textTransform = DynamicTextTransformation.Create(this);
　　var code = new CodeGenerationTools(this);
　　var ef = new MetadataTools(this);
　　var fileManager = EntityFrameworkTemplateFileManager.Create(this);
　　EdmMetadataLoader loader=new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
　　EdmItemCollection itemCollection = (EdmItemCollection)loader.CreateEdmItemCollection(inputFile);
    //itemCollection.CreateEdmItemCollection(inputFile);  
#>
using SimOA_DAL;
using SimOA_IDAL;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SimOA_DalFactory
{
public partial class DBSession : IDBSession
    {
<#
// Emit Entity Types

foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);    
#>	
		private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;
        public I<#=entity.Name#>Dal <#=entity.Name#>Dal
        {
            get
            {
                if(_<#=entity.Name#>Dal == null)
                {
                    _<#=entity.Name#>Dal = DalFactory.Get<#=entity.Name#>Dal();
                }
                return _<#=entity.Name#>Dal;
            }
            set { _<#=entity.Name#>Dal = value; }
        }
<#}#>
	}	
}

  <#+ 
public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>
