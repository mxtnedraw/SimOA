<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
 <#
    const string inputFile = @"../SimOA_Model/SimOA.edmx";
　　var textTransform = DynamicTextTransformation.Create(this);
　　var code = new CodeGenerationTools(this);
　　var ef = new MetadataTools(this);
　　var fileManager = EntityFrameworkTemplateFileManager.Create(this);
　　EdmMetadataLoader loader=new EdmMetadataLoader(textTransform.Host, textTransform.Errors);
　　EdmItemCollection itemCollection = (EdmItemCollection)loader.CreateEdmItemCollection(inputFile);
    //itemCollection.CreateEdmItemCollection(inputFile);  
#>
using SimOA_IDAL;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace SimOA_DalFactory
{
	public partial class DalFactory
	{
	<#
		foreach (EntityType entity in itemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{
	#> 
	        public static I<#=entity.Name#>Dal Get<#=entity.Name#>Dal()
			{
				Assembly ass = Assembly.Load(strAssPath);
				return ass.CreateInstance(strNameSpace + ".<#=entity.Name#>Dal") as I<#=entity.Name#>Dal;
			}
	    <#}#>
     }   
  }

  <#+ 
public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>
